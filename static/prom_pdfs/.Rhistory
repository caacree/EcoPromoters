#rasterImage(legend_image, 0, 0, 1,1)
plot_gene_map(dna_segs=list(md18, dss3p8), legend = T,
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
plot_gene_map(dna_segs=list(md18, dss3p8), global_color_scheme = "auto",
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
plot_gene_map(dna_segs=list(md18, dss3p8), global_color_scheme = "blue",
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
plot_gene_map(dna_segs=list(md18, dss3p8), global_color_scheme = "blue_white",
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
plot_gene_map(dna_segs=list(md18, dss3p8), global_color_scheme = c("auto", "auto", "blue", .5),
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
plot_gene_map(dna_segs=list(md18, dss3p8), global_color_scheme = c("auto", "auto", "grey", .5),
comparisons=list(md18_vs_dss3p8),
#               annotations=list(ann_md18, ann_dss3p8), annotation_height=0.8,
#               xlims=xlims, #USE to specify specific regions
main="MD18 vs DSS3P8",
gene_type="side_blocks",
dna_seg_scale=TRUE, scale=TRUE
)
setwd('~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/scripts/figs/')
knitr::opts_knit$set(root.dir = '~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/scripts/figs')
library(dplyr)
library(tidyr)
library(ggplot2)
require(cowplot)
library(sqldf)
options(stringsAsFactors = F)
options(scipen = 10000)
data <-  read.table('../../processed_data/endo_scramble/endo_scramble_expression_formatted_std.txt',
header = T)
ttest <- read.table('../../processed_data/endo_scramble/endo_scramble_ttests.txt', header = T)
data <- left_join(data, select(ttest, -tss_name), by = 'name')
endo_scramble <-  read.table('../../processed_data/endo_scramble/endo_scramble_expression_formatted_std.txt', header = T)
endo_scramble  <- endo_scramble  %>%
mutate(name = gsub('_flipped', '', name),
name = gsub('_rc', '', name))
endo_scramble <- endo_scramble %>%
mutate(category = case_when(grepl('unscrambled', .$name) ~ 'unscramble',
grepl('neg', .$name) ~ 'negative',
TRUE ~ 'scramble'))
negatives <- filter(endo_scramble, category == 'negative')
neg_median <- median(negatives$expn_med_fitted_scaled, na.rm = T)
neg_mad <- mad(negatives$expn_med_fitted_scaled, na.rm = T)
threshold <- neg_median + 3*neg_mad
data <- filter(endo_scramble, category != 'negative')
tss_data <- data %>%
separate(name, into = c('tss_name', 'tss_position', 'strand_scramble_loc'), sep = ',',
convert = T, remove = F) %>%
separate(strand_scramble_loc, into = c('strand', 'scramble_loc'), sep = '_') %>%
mutate(scramble_loc = gsub('unscrambled', NA, scramble_loc),
scramble_loc = gsub('scrambled', '', scramble_loc)) %>%
separate(scramble_loc, into = c('scramble_start', 'scramble_end'),
sep = '-', convert = T) %>%
group_by(tss_name) %>%
mutate(unscrambled_exp = ifelse(any(category == 'unscramble'),
expn_med_fitted_scaled[category == 'unscramble'],
NA), relative_exp = log2(expn_med_fitted_scaled / unscrambled_exp)) %>%
mutate(active = ifelse(expn_med_fitted_scaled >= threshold, 'active', 'inactive'))
repressor_color <- '#000066'
activator_color <- '#FFD700'
data <- data %>% left_join(., ttest, by = 'name') %>%
mutate(site_type_ttest_signif = ifelse(significant == T, site_type_ttest, NA)) %>%
mutate(site_type_signif = case_when(.$site_type_ttest_signif == 'increased' ~ 'activating',
.$site_type_ttest_signif == 'reduced' ~ 'repressing'))
data %>%
filter(!is.na(site_type_signif)) %>%
ggplot(aes(unscrambled_exp, relative_exp)) +
geom_point(data = filter(data, is.na(site_type_signif)),
color = 'gray38', alpha = 0.25) +
geom_point(alpha = 0.50, aes(color = site_type_signif)) +
scale_color_manual(values = c(repressor_color, activator_color), na.value = 'gray65') +
scale_x_log10(breaks = c(0.01, 0.1, 1, 10, 100, 1000)) +
scale_y_log10(breaks = c(0.01, 0.1, 1, 10, 100)) + annotation_logticks() +
labs(x = 'wild-type expression',
y = 'relative expression',
color = 'significant\nFDR-adjusted\nt-test') +
theme(aspect.ratio = 1,
axis.text = element_text(size = 20),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20))
sd <- sd(data$relative_exp, na.rm = T) #-.1167
mean <- mean(data$relative_exp, na.rm = T)
upreg <- data %>% na.omit() %>% filter(relative_exp > mean+2*sd) %>%
select(scramble_start, relative_exp) %>%
mutate(scramble_start = ((scramble_start-120)), "Type"="Repressing")
downreg <- data %>% filter(relative_exp < mean-2*sd) %>%
select(scramble_start, relative_exp) %>%
mutate(scramble_start = ((scramble_start-120)), "Type"="Activating")
rbind(upreg, downreg) %>% ggplot(., aes(x=scramble_start)) + geom_density(aes(fill=Type), alpha = .7, bw = 2.5) +
geom_vline(xintercept = c(0,-20,-40,-60,-80,-100), linetype="dashed", alpha=.6) +
scale_x_continuous(breaks = c(0,-20,-40,-60,-80,-100)) +
scale_fill_manual(values = c("#FDE725FF","#482878FF")) +
labs(x="Scramble Position", y = "Density", title = "Distribution of Sequences that Modulate Expression")
upreg <- data %>% na.omit() %>% #filter(relative_exp > mean+2*sd) %>%
filter(site_type_ttest_signif == 'increased', significant == T) %>%
select(scramble_start, relative_exp) %>%
mutate(scramble_start = ((scramble_start-120)), "Type"="Repressing")
downreg <- data %>% #filter(relative_exp < mean-2*sd) %>%
filter(site_type_ttest_signif == 'reduced', significant == T) %>%
select(scramble_start, relative_exp) %>%
mutate(scramble_start = ((scramble_start-120)), "Type"="Activating")
rbind(upreg, downreg) %>% ggplot(., aes(x=scramble_start)) + geom_density(aes(fill=Type), alpha = .7, bw = 2.5) +
geom_vline(xintercept = c(0,-20,-40,-60,-80,-100), linetype="dashed", alpha=.6) +
scale_x_continuous(breaks = c(0,-20,-40,-60,-80,-100)) +
scale_fill_manual(values = c("#FDE725FF","#482878FF")) +
labs(x="Scramble Position", y = "Density", title = "Distribution of Sequences that Modulate Expression")
scramble_merged <- read.table("../../processed_data/endo_scramble/scramble_merged_sites.txt", header = T)
scramble_merged %>%
# filter(!is.na(tf_concordance)) %>%
filter(tf_effect == '-' | tf_effect == '+' | is.na(tf_effect)) %>%
group_by(tf_effect, tf_concordance) %>%
tally() %>%
ggplot(aes(tf_effect, n)) +
geom_bar(stat = 'identity', position = 'dodge', aes(fill = tf_concordance)) +
scale_y_continuous(breaks = seq(0, 1200, 100)) +
# axis.break(axis = 1, breakpos = 500) +
scale_fill_manual(values = c('#FFBC42', '#0496FF'), na.value = 'gray38') +
labs(x = 'TFBS gene expression effect', y = 'count',
fill = 'concordance',
title = 'merged scramble sites') +
theme(legend.position = 'top', aspect.ratio = 1)
operons <- read.table("../../ref/Operons_all.bed", col.names = c('genome', 'Leftbound', 'Rightbound', 'Operon', '.', 'operon_strand')) %>% select('Operon', 'Leftbound', 'Rightbound', 'operon_strand')
#Need to verify operon strandedness, since operon export not great. Using U00096.3 strandedness
Operon_U96.3 <- read.table("../../ref/OperonSet_U00096.3.txt", skip = 40, fill = NA, sep = '\t') %>% select('Operon'=V1, 'operon_strand_U96.3'=V4)
Operon_U96.3$operon_strand_U96.3[Operon_U96.3$operon_strand_U96.3=='forward'] <- '+'
Operon_U96.3$operon_strand_U96.3[Operon_U96.3$operon_strand_U96.3=='reverse'] <- '-'
operons <-inner_join(operons, Operon_U96.3, by = 'Operon') %>% filter(operon_strand == operon_strand_U96.3) %>%
mutate(genome='U00096.2', fill = '.') %>% select(genome,Leftbound,Rightbound,Operon,fill,operon_strand)
write.table(operons, "../../ref/Operons_all_clean.bed", sep = '\t', row.names = F, quote = F, col.names = F)
endo_scrambled_variants <- endo_scramble %>%
mutate(downstream = ifelse(strand == '+', tss_position + 500, tss_position-500)) %>%
mutate(strand = as.character(strand)) %>%
select(tss_name, tss_position, downstream, strand) %>% distinct()
regulated_operons <- sqldf("SELECT a.*, b.*
FROM endo_scrambled_variants AS a
JOIN operons AS b
ON b.Leftbound BETWEEN a.tss_position AND a.downstream
OR b.Rightbound BETWEEN a.tss_position AND a.downstream
OR b.Leftbound BETWEEN a.downstream AND a.tss_position
OR b.Rightbound BETWEEN a.downstream AND a.tss_position") %>%
na.omit() %>%
group_by(tss_name) %>%
mutate(if (strand == '+') Leftbound == min(Leftbound) else Rightbound == max(Rightbound)) %>%
mutate(Orientation = ifelse(strand==operon_strand, "Sense", "Antisense")) %>%
filter(Orientation == 'Sense') %>%
ungroup() %>%
select(tss_name, tss_position, tss_strand=strand, operon_strand, Leftbound, Rightbound, Operon) %>%
mutate(tss_name = as.character(tss_name)) %>%
distinct()
regulated_operons <- regulated_operons[!grepl('neg_control', as.character(regulated_operons$tss_name)),]
#How many unique operons we get descriptions for?
regulated_operons %>%
select(Operon) %>%
distinct() %>%
nrow()
unregulated_operons <- anti_join(operons, regulated_operons, by = 'Operon')
#How many newly annotated operons?
TF_operon <- read.table("../../ref/network_tf_operon.txt",
skip = 35, fill = NA, header = F,
col.names = c('TF', 'Operon', 'regulatory_effect', 'evidence', 'evidence_strength'), sep = '\t') %>%
separate('Operon', c('Operon', 'genes'), sep='\\[')
operons %>% select(Operon) %>% distinct() %>% nrow() #2565 total operons in E. coli
TF_operon %>% select('Operon') %>% distinct() %>% nrow() #868 annotated operons
TF_operon <- read.table("../../ref/network_tf_operon.txt",
skip = 35, fill = NA, header = F,
col.names = c('TF', 'Operon', 'regulatory_effect', 'evidence', 'evidence_strength'), sep = '\t') %>%
separate('Operon', c('Operon', 'genes'), sep='\\[')
operons %>% select(Operon) %>% distinct() %>% nrow() #2370 total operons in E. coli
TF_operon %>% select('Operon') %>% distinct() %>% nrow() #868 annotated operons
anti_join(regulated_operons, TF_operon, by = 'Operon') %>%
select(Operon) %>%
distinct() %>% nrow() #698 new operon promoters characterized
#How many unique operons were annotated
regulated_operons %>%
select(Operon) %>%
distinct() %>%
nrow() #1158 total operons characterized
#How many unique operons we get descriptions for?
regulated_operons %>%
select(Operon) %>%
distinct() %>%
nrow()
View(regulated_operons)
View(unregulated_operons)
#write out list of operons with TSS annotations
regulated_operons %>%
select(Operon) %>%
distinct() %>% write.table("../../ref/OperonsWithTSS_names.txt", col.names = F, row.names = F, quote = F)
#write out list of operons with TSS annotations
regulated_operons %>%
select(Operon) %>%
distinct() %>% write.table("../../ref/OperonsWithTSS_names.txt", col.names = F, row.names = F, quote = F)
for (i in operons) {
#dir_name <- paste0('content/update/', );
#dir.create(file.path(dir_name), showWarnings = FALSE);
query_operon <- i
#knit(input = 'OnlineFigs_Standalone.Rmd', output = paste0(query_operon, '.md'));
rmarkdown::render(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/", query_operon, ".Rmd", sep = ''), "pdf_document")
## THIS IS REQUIRED AFTER EVERY knit()!!!
## otherwise the image links go wrong and/or the next knit() may overwrite the previous plots
# file.rename('figure/', paste0('prom_htmls/figure'));
}
setwd("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/prom_pdfs/")
operons <- read.table("../OperonsWithTSS_names.txt", header = F, fill = NA)
operons<- operons[,1]
for (i in operons) {
#dir_name <- paste0('content/update/', );
#dir.create(file.path(dir_name), showWarnings = FALSE);
query_operon <- i
#knit(input = 'OnlineFigs_Standalone.Rmd', output = paste0(query_operon, '.md'));
rmarkdown::render(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/", query_operon, ".Rmd", sep = ''), "pdf_document")
## THIS IS REQUIRED AFTER EVERY knit()!!!
## otherwise the image links go wrong and/or the next knit() may overwrite the previous plots
# file.rename('figure/', paste0('prom_htmls/figure'));
}
operons <- read.table("../ref/OperonsWithTSS_names.txt", header = F, fill = NA)
operons <- read.table("../../ref/OperonsWithTSS_names.txt", header = F, fill = NA)
operons<- operons[,1]
for (i in operons) {
#dir_name <- paste0('content/update/', );
#dir.create(file.path(dir_name), showWarnings = FALSE);
query_operon <- i
#knit(input = 'OnlineFigs_Standalone.Rmd', output = paste0(query_operon, '.md'));
rmarkdown::render(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/", query_operon, ".Rmd", sep = ''), "pdf_document")
## THIS IS REQUIRED AFTER EVERY knit()!!!
## otherwise the image links go wrong and/or the next knit() may overwrite the previous plots
# file.rename('figure/', paste0('prom_htmls/figure'));
}
setwd('~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts')
knitr::opts_knit$set(root.dir = '~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/')
library(tidyverse)
library(ggthemes)
library(sqldf)
library(gt)
library(magick)
library(knitr)
library(cowplot)
options(stringsAsFactors = F)
#rmarkdown::render("MyDocument.Rmd", params = list(
#  year = 2017,
#  region = "Asia",
#  printcode = FALSE,
#  file = "file2.csv"
#))
#---
#output:
#  html_document: default
#  pdf_document: default
#---
#args <- commandArgs()
#print(args)
#Read in DATA, here we just use expn_med_fitted since not comparing between datasets
#Read in TSS data
TSS_data <- read.table("../rLP5_Endo2_lb_expression_formatted_std.txt",
header = T, fill  = T)
#Read in mutagenesis data
mutagenesis_data <- read.table('../endo_scramble_expression_formatted_std.txt',
header = T)
mutagenesis_data  <- mutagenesis_data  %>%
mutate(name = gsub('_flipped', '', name),
name = gsub('_rc', '', name))
mutagenesis_data <- mutagenesis_data %>%
mutate(category = case_when(grepl('unscrambled', .$name) ~ 'unscramble',
grepl('neg', .$name) ~ 'negative',
TRUE ~ 'scramble'))
#isolate control sequences
pos <- subset(TSS_data, grepl("pos_control", TSS_data$name))
negatives <- subset(TSS_data, grepl("neg_control", TSS_data$name))
neg_median <- median(negatives$expn_med_fitted_scaled, na.rm = T)
neg_mad <- mad(negatives$expn_med_fitted_scaled, na.rm = T)
threshold <- neg_median + 3*neg_mad
data <- filter(mutagenesis_data, category != 'negative')
#calculate relative expression of scrambles and identify whether active or inactive
mutagenesis_data <- data %>%
separate(name, into = c('tss_name', 'tss_position', 'strand_scramble_loc'), sep = ',',
convert = T, remove = F) %>%
separate(strand_scramble_loc, into = c('strand', 'scramble_loc'), sep = '_') %>%
mutate(scramble_loc = gsub('unscrambled', NA, scramble_loc),
scramble_loc = gsub('scrambled', '', scramble_loc)) %>%
separate(scramble_loc, into = c('scramble_start', 'scramble_end'),
sep = '-', convert = T) %>%
group_by(tss_name) %>%
mutate(unscrambled_exp = ifelse(any(category == 'unscramble'),
expn_med_fitted[category == 'unscramble'],
NA), relative_exp = log2(expn_med_fitted / unscrambled_exp)) %>%
mutate(active = ifelse(expn_med_fitted_scaled >= threshold, 'active', 'inactive'))
rm(data)
#Read in operon info
Ecoli_operons <- read.table("../../ref/Operons_all_clean.bed",
col.names = c('genome', 'left', 'right', 'operon', 'fill', 'strand')) %>%
mutate(upstream_left = ifelse(strand == '+', left-500, right),
upstream_right = ifelse(strand == '+', left, right+500))
#Pick operon to study from this list, recommend sort by most TSS to start
operons_with_tss <- read.table("../../ref/OperonsWithTSS_names.txt", header = T)
###THIS IS THE IMPORTANT PART###
query_operon <- "ryfD"
#Left bound of upstream region
prom_range_left <-  Ecoli_operons$upstream_left[Ecoli_operons$operon %in% query_operon]
prom_range_right <- Ecoli_operons$upstream_right[Ecoli_operons$operon %in% query_operon]
tss_hits <- TSS_data %>% filter(as.numeric(tss_position) > prom_range_left & as.numeric(tss_position) < prom_range_right)
expression_values <- tss_hits$expn_med_fitted
tss_coords <- tss_hits$tss_position
tss_names <- tss_hits$tss_name
active_expression_values <- tss_hits$expn_med_fitted[tss_hits$active == 'active']
active_tss_coords <- tss_hits$tss_position[tss_hits$active == 'active']
active_tss_names <- tss_hits$tss_name[tss_hits$active == 'active']
Ecoli_operons %>% filter(operon == query_operon) %>%
mutate(operon_start = ifelse(strand == '+', left, right),
operon_end = ifelse(strand == '+', right, left)) %>%
select('Operon'=operon, 'Strand'=strand, 'Operon start'=operon_start, 'Operon end'=operon_end) %>%
gt()
```{r, echo=FALSE, fig.align = 'left'}
#Load operon BoKeh plot
fig_svg<-ggdraw()+draw_image(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/bokeh_operon_figs/", query_operon, ".svg", sep = ''))
plot(fig_svg)
tss_hits %>% select('TSS name'=tss_name, 'TSS position'=tss_position, 'Strand' = strand, 'TSS activity' =expn_med_fitted, 'Category'=active) %>%
gt() #%>% #gt package makes tables
#Generate plots
plot_list <- list()
for (i in 1:length(active_tss_names)) {
query_tss <- active_tss_names[i]
query_expression <- active_expression_values[i]
#plot mutagenesis
plot_A <- mutagenesis_data %>%
filter(tss_name == query_tss)%>%
mutate(scramble_start = (scramble_start-120),
relative_exp = relative_exp,
Type = ifelse(relative_exp > 0, 'Repressing', 'Activating')) %>%
ggplot(aes(scramble_start, relative_exp)) +
geom_vline(xintercept = c(0, -20, -40, -60, -80, -100, -120),
linetype = "dashed",
alpha = 0.6) +
geom_bar(aes(fill = Type),
stat = "identity",
color = 'black',
alpha = 0.8) +
scale_fill_manual(values = c("#ffd700", "#000066")) +
geom_hline(yintercept = 0) +
labs(x = 'Scramble Starting Position',
y = 'log2(Rel. Activity)',
color = '',
title = paste(query_tss, ' mutagenesis profile', sep = '')) +
theme_clean() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title.x.bottom = element_text(size = 12),
axis.title.y.left = element_text(size = 12),
plot.title = element_text(size=10),
legend.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
legend.title = element_text(size = 0),
legend.key.size = unit(0.25,"cm"),
legend.key.height = unit(0.25,"cm"),
legend.key.width = unit(0.25,"cm"),
legend.text = element_text(size = 8))
#plot expression relative to library
plot_B <- ggplot(TSS_data, aes(expn_med_fitted)) +
geom_histogram(color = 'black', fill = 'black', alpha = .2, bins = 100) +
geom_vline(xintercept = query_expression, linetype = 'dashed') +
geom_histogram(data=negatives, aes(expn_med_fitted),
color = 'red', fill = 'red', alpha = .2,
bins = 100) +
geom_histogram(data=pos, aes(expn_med_fitted),
color = 'dodgerblue2', fill = 'dodgerblue2', alpha = .2,
bins = 100) +
scale_x_log10(limits = c(0.35,100)) +
scale_y_log10() +
annotation_logticks(sides = 'bl') +
annotate("text", x= query_expression , y = 2500, label = 'Activity', size = 3) +
labs(x = 'rLP5 Expression', y = 'Count',
title = paste(query_tss, ' activity', sep = '')) +
theme_clean() +
theme(axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
axis.title.x.bottom = element_text(size = 10),
axis.title.y.left = element_text(size = 12),
plot.title = element_text(size=12))
plot_list[[(2*(i-1)+1)]] <- plot_A
plot_list[[(2*(i-1)+2)]] <- plot_B
}
expression_values <- tss_hits$expn_med_fitted
tss_coords <- tss_hits$tss_position
tss_names <- tss_hits$tss_name
active_expression_values <- tss_hits$expn_med_fitted[tss_hits$active == 'active']
active_tss_coords <- tss_hits$tss_position[tss_hits$active == 'active']
active_tss_names <- tss_hits$tss_name[tss_hits$active == 'active']
Ecoli_operons %>% filter(operon == query_operon) %>%
mutate(operon_start = ifelse(strand == '+', left, right),
operon_end = ifelse(strand == '+', right, left)) %>%
select('Operon'=operon, 'Strand'=strand, 'Operon start'=operon_start, 'Operon end'=operon_end) %>%
gt()
#Load operon BoKeh plot
fig_svg<-ggdraw()+draw_image(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/bokeh_operon_figs/", query_operon, ".svg", sep = ''))
plot(fig_svg)
plot(fig_svg)
setwd("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/prom_pdfs/")
operons <- read.table("../../ref/OperonsWithTSS_names.txt", header = F, fill = NA)
operons<- operons[,1]
for (i in operons) {
#dir_name <- paste0('content/update/', );
#dir.create(file.path(dir_name), showWarnings = FALSE);
query_operon <- i
#knit(input = 'OnlineFigs_Standalone.Rmd', output = paste0(query_operon, '.md'));
try(rmarkdown::render(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/", query_operon, ".Rmd", sep = ''), "pdf_document"))
## THIS IS REQUIRED AFTER EVERY knit()!!!
## otherwise the image links go wrong and/or the next knit() may overwrite the previous plots
# file.rename('figure/', paste0('prom_htmls/figure'));
}
setwd('~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts')
knitr::opts_knit$set(root.dir = '~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/')
library(tidyverse)
library(ggthemes)
library(sqldf)
library(gt)
library(magick)
library(knitr)
library(cowplot)
options(stringsAsFactors = F)
#rmarkdown::render("MyDocument.Rmd", params = list(
#  year = 2017,
#  region = "Asia",
#  printcode = FALSE,
#  file = "file2.csv"
#))
#---
#output:
#  html_document: default
#  pdf_document: default
#---
#args <- commandArgs()
#print(args)
```{r, message=FALSE, warning=FALSE, echo = FALSE, fig.height=length(active_tss_names)*1.5}
plot_grid(plotlist = plot_list, ncol = 2)
```{r  fig.align = 'left', echo=FALSE, fig.cap="Table 1: Identified TSSs upstream of query operon."}
tss_hits %>% select('TSS name'=tss_name, 'TSS position'=tss_position, 'Strand' = strand, 'TSS activity' =expn_med_fitted, 'Category'=active) %>%
gt() #%>% #gt package makes tables
#Pick operon to study from this list, recommend sort by most TSS to start
operons_with_tss <- read.table("../OperonsWithTSS.txt", header = T)
#Here's some good examples
#single TSS: fabB, exbBD
#4 TSS ybeF
#3 TSS: ffs,
#2 ftnA
###THIS IS THE IMPORTANT PART###
query_operon <- 'leuLABCD'  #change this depending on operon of interest
#Left bound of upstream region
prom_range_left <-  Ecoli_operons$upstream_left[Ecoli_operons$operon %in% query_operon]
prom_range_right <- Ecoli_operons$upstream_right[Ecoli_operons$operon %in% query_operon]
tss_hits <- TSS_data %>% filter(as.numeric(tss_position) > prom_range_left & as.numeric(tss_position) < prom_range_right)
expression_values <- tss_hits$expn_med_fitted
tss_coords <- tss_hits$tss_position
tss_names <- tss_hits$tss_name
active_expression_values <- tss_hits$expn_med_fitted[tss_hits$active == 'active']
active_tss_coords <- tss_hits$tss_position[tss_hits$active == 'active']
active_tss_names <- tss_hits$tss_name[tss_hits$active == 'active']
#Print operon info table
Ecoli_operons %>% filter(operon == query_operon) %>%
mutate(operon_start = ifelse(strand == '+', left, right),
operon_end = ifelse(strand == '+', right, left)) %>%
select('Operon'=operon, 'Strand'=strand, 'Operon start'=operon_start, 'Operon end'=operon_end) %>%
gt()
setwd("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/prom_pdfs/")
operons <- read.table("../../ref/OperonsWithTSS_names.txt", header = F, fill = NA)
operons<- operons[,1]
#for (i in operons){
#  query_operon <- i
#  rmarkdown::render("OnlineFigs_Standalone.Rmd",
#                    output_format = "html_document",
#                    output_file = paste("prom_htmls/", query_operon, ".txt", sep = ''),
#                    params=list(args = query_operon))
#}
for (i in operons) {
#dir_name <- paste0('content/update/', );
#dir.create(file.path(dir_name), showWarnings = FALSE);
query_operon <- i
#knit(input = 'OnlineFigs_Standalone.Rmd', output = paste0(query_operon, '.md'));
try(rmarkdown::render(paste("~/Google_Drive/Kosuri_Lab/ecoli_promoter_mpra/DataTesting/Rmd_scripts/", query_operon, ".Rmd", sep = ''), "pdf_document"))
## THIS IS REQUIRED AFTER EVERY knit()!!!
## otherwise the image links go wrong and/or the next knit() may overwrite the previous plots
# file.rename('figure/', paste0('prom_htmls/figure'));
}
#markdown::markdownToHTML(file =  "nagBAC-umpH.md", "nagBAC-umpH.html")
